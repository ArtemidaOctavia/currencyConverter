{"version":3,"sources":["components/Converter/Converter.module.scss","components/Header/Header.module.scss","components/Courses/Courses.module.scss","redux/converterReducer.js","redux/coursesReducer.js","API/API.js","components/Converter/ConverterContainer.jsx","components/Converter/Converter.jsx","components/Courses/CoursesContainer.jsx","components/Courses/Courses.jsx","components/Header/HeaderContainer.jsx","components/Header/Header.jsx","redux/headerReducer.js","redux/store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","currency","converted","sum","courses","getCoursesThunk","city","dispatch","axios","getInfo","then","response","type","data","renderDropdownElement","currencyDescription","index","setCurrency","substring","Dropdown","Item","onClick","key","ConverterContainer","connect","state","converter","setConverted","value","setCourses","setSum","props","toFixed","Container","className","styles","converterHolder","InputGroup","FormControl","input","aria-describedby","onChange","event","target","placeholder","readOnly","DropdownButton","as","Prepend","variant","title","Object","entries","map","renderTableRows","currencies","CoursesContainer","coursesHolder","Table","bordered","hover","HeaderContainer","Nav","navlink","to","Button","reducers","combineReducers","header","action","store","createStore","applyMiddleware","ReduxThunk","window","App","path","render","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ca56010b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"converterHolder\":\"Converter_converterHolder__3E-zl\",\"input\":\"Converter_input__mNKBq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navlink\":\"Header_navlink__12MV7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"coursesHolder\":\"Courses_coursesHolder__2t8gv\"};","let initialState = {\r\n  currency: 'USD',\r\n  converted: null,\r\n  sum: null,\r\n};\r\n\r\nexport const converterReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'SET-CURRENCY':\r\n      return {\r\n        ...state,\r\n        currency: action.currency\r\n      };\r\n    case 'SET-CONVERTED':\r\n      switch (state.currency) {\r\n        case 'RUB':\r\n          return {\r\n            ...state,\r\n            converted: (action.value * 100).toFixed(2)\r\n          };\r\n        case 'UAH':\r\n          return {\r\n            ...state,\r\n            converted: (action.value * 100).toFixed(2)\r\n          };\r\n        case 'SEK': {\r\n          return {\r\n            ...state,\r\n            converted: (action.value * 10).toFixed(2)\r\n          }\r\n        }\r\n        default:\r\n          return {\r\n            ...state,\r\n            converted: action.value\r\n          };\r\n      }\r\n    case 'SET-SUM':\r\n      return {\r\n        ...state,\r\n        sum: action.sum\r\n      };\r\n    default:\r\n      return {\r\n        ...state\r\n      }\r\n  }\r\n};\r\n\r\nexport const setCurrency = (currency) => ({type: 'SET-CURRENCY', currency});\r\nexport const setConverted = (value) => ({type: 'SET-CONVERTED', value});\r\nexport const setSum = (sum) => ({type: 'SET-SUM', sum});","import {getInfo} from \"../API/API\";\r\n\r\nlet initialState = {\r\n  courses: null\r\n};\r\n\r\nexport const coursesReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'SET-COURSES':\r\n      return {\r\n        ...state,\r\n        courses: action.courses\r\n      };\r\n    default:\r\n      return {\r\n        ...state\r\n      }\r\n  }\r\n};\r\n\r\nlet setCoursesActionCreator = (courses) => {\r\n  return {\r\n    type: `SET-COURSES`,\r\n    courses\r\n  }\r\n};\r\n\r\nexport const getCoursesThunk = (city) => {\r\n  return (dispatch) => {\r\n    getInfo(city).then((response) => {\r\n      dispatch(setCoursesActionCreator(response.data[0]))\r\n    });\r\n  }\r\n};\r\n\r\n","import * as axios from \"axios/index\"\r\n\r\n// https://belarusbank.by/api/kursExchange?city=%D0%92%D0%B8%D1%82%D0%B5%D0%B1%D1%81%D0%BA\r\n\r\n\r\nexport const getInfo = (city) => {\r\n  return axios.get(`https://cors-anywhere.herokuapp.com/https://belarusbank.by/api/kursExchange?city=${city}`)\r\n};","import React from 'react';\r\nimport {Converter} from \"./Converter\";\r\nimport {connect} from 'react-redux';\r\nimport {setConverted, setCurrency, setSum} from \"../../redux/converterReducer\";\r\nimport {getCoursesThunk} from \"../../redux/coursesReducer\";\r\nimport {Dropdown} from \"react-bootstrap\";\r\n\r\nconst renderDropdownElement = (currencyDescription, index, setCurrency) => {\r\n  if (index <= 16 && (currencyDescription[1] !== '0.0000')) {\r\n    let currency = index % 2 === 0 ? currencyDescription[0].substring(0, 3) : '';\r\n    if (index % 2 === 0) {\r\n      return <Dropdown.Item onClick={() => {\r\n        setCurrency(currency);\r\n      }} key={index}>{currency}</Dropdown.Item>\r\n    }\r\n  }\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    courses: state.courses.courses,\r\n    currency: state.converter.currency,\r\n    converted: state.converter.converted,\r\n    sum: state.converter.sum,\r\n    renderDropdownElement: renderDropdownElement\r\n  }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setCurrency: (currency) => dispatch(setCurrency(currency)),\r\n    setConverted: (converted) => dispatch(setConverted(converted)),\r\n    setCourses: (city) => dispatch(getCoursesThunk(city)),\r\n    setSum: (sum) => dispatch(setSum(sum)),\r\n  }\r\n};\r\n\r\nconst ConverterContainer = connect(mapStateToProps, mapDispatchToProps)(Converter);\r\nexport default ConverterContainer;","import React from 'react';\r\nimport styles from './Converter.module.scss'\r\nimport {DropdownButton, FormControl, InputGroup, Container} from \"react-bootstrap\";\r\n\r\nexport const Converter = (props) => {\r\n\r\n  if ((props.sum !== null) && props.courses) {\r\n    props.setConverted((props.sum / props.courses[`${props.currency}_out`]).toFixed(2));\r\n  }\r\n\r\n  return <Container className={`${styles.converterHolder}; col-xl-3`}>\r\n    <InputGroup className=\"mb-3\">\r\n      <FormControl value={props.sum} type=\"number\" className={styles.input} aria-describedby=\"basic-addon1\"\r\n                   onChange={(event) => {\r\n                     props.setSum(event.target.value);\r\n                   }} placeholder={'BYR'}/>\r\n\r\n    </InputGroup>\r\n    <InputGroup className=\"mb-3\">\r\n      <FormControl readOnly value={props.converted && props.currency ? `${props.converted}` : ''}/>\r\n      <DropdownButton\r\n        as={InputGroup.Prepend}\r\n        variant=\"outline-secondary\"\r\n        title={props.currency}>\r\n        {props.courses &&\r\n        Object.entries(props.courses).map((currencyDescription, index) => {\r\n          return props.renderDropdownElement(currencyDescription, index, props.setCurrency)\r\n        })\r\n        }\r\n      </DropdownButton>\r\n    </InputGroup>\r\n  </Container>\r\n};","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Courses} from \"./Courses\";\r\nimport {getCoursesThunk} from \"../../redux/coursesReducer\";\r\n\r\nconst renderTableRows = (currencyDescription, index, currencies) => {\r\n  if (index <= 16 && (currencyDescription[1] !== '0.0000')) {\r\n    let currency = index % 2 === 0 ? currencyDescription[0].substring(0, 3) : '';\r\n    if (index % 2 === 0) {\r\n      return <tr key={index}>\r\n        <td>{currency}</td>\r\n        <td>{currencyDescription[1]}</td>\r\n        <td>{currencies[index + 1][1]}</td>\r\n      </tr>\r\n    }\r\n  }\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    courses: state.courses.courses,\r\n    renderTableRows: renderTableRows\r\n  }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setCourses: (city) => dispatch(getCoursesThunk(city))\r\n  }\r\n};\r\n\r\nconst CoursesContainer = connect(mapStateToProps, mapDispatchToProps)(Courses);\r\nexport default CoursesContainer;","import React from 'react';\r\nimport styles from './Courses.module.scss'\r\nimport {Container, Table} from \"react-bootstrap\";\r\n\r\nexport const Courses = (props) => {\r\n  return (\r\n    <Container className={styles.coursesHolder}>\r\n      {props.courses &&\r\n      <Table bordered hover>\r\n        <thead>\r\n        <tr>\r\n          <th>Currency</th>\r\n          <th>Buy</th>\r\n          <th>Sell</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n        {\r\n          Object.entries(props.courses).map((currencyDescription, index, currencies) => {\r\n            return props.renderTableRows(currencyDescription, index, currencies);\r\n          })\r\n        }\r\n        </tbody>\r\n      </Table>\r\n      }\r\n    </Container>\r\n  )\r\n};","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Header} from \"./Header\";\r\nimport {getCoursesThunk} from \"../../redux/coursesReducer\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n\r\n  }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setCourses: (city) => dispatch(getCoursesThunk(city))\r\n  }\r\n};\r\n\r\nconst HeaderContainer = connect(mapStateToProps, mapDispatchToProps)(Header);\r\nexport default HeaderContainer;","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport styles from './Header.module.scss'\r\nimport {Button, Container, Nav} from \"react-bootstrap\";\r\n\r\nexport const Header = (props) => {\r\n  props.setCourses('Минск');\r\n  return (\r\n    <Container>\r\n      <Nav className={'navbar navbar-expand-sm justify-content-center'}>\r\n        <NavLink className={styles.navlink} to={`/converter`}><Button variant={'secondary'}>Converter</Button></NavLink>\r\n        <NavLink className={styles.navlink} to={`/courses`}><Button variant={'secondary'}>Courses</Button></NavLink>\r\n      </Nav>\r\n    </Container>\r\n  )\r\n};","let initialState = {\r\n\r\n};\r\n\r\nexport const headerReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    default:\r\n      return {\r\n        ...state\r\n      }\r\n  }\r\n};","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {headerReducer} from \"./headerReducer\";\r\nimport {coursesReducer} from \"./coursesReducer\";\r\nimport ReduxThunk from 'redux-thunk'\r\nimport {converterReducer} from \"./converterReducer\";\r\n\r\n\r\nlet reducers = combineReducers({\r\n  header: headerReducer,\r\n  courses: coursesReducer,\r\n  converter: converterReducer\r\n});\r\n\r\nlet store = createStore(reducers, applyMiddleware(ReduxThunk));\r\n\r\nwindow.store = store;\r\n\r\nexport default store;","import React from 'react';\r\nimport {Provider} from \"react-redux\";\r\nimport {BrowserRouter, Route} from \"react-router-dom\";\r\nimport ConverterContainer from \"./components/Converter/ConverterContainer\";\r\nimport CoursesContainer from \"./components/Courses/CoursesContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport store from \"./redux/store\";\r\n\r\nfunction App() {\r\n  return (\r\n      <BrowserRouter>\r\n        <Provider store={store}>\r\n            <HeaderContainer/>\r\n          <Route path={'/converter'} render={() => <ConverterContainer/>}/>\r\n          <Route path={'/courses'} render={() => <CoursesContainer/>}/>\r\n        </Provider>\r\n      </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './App.scss';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}